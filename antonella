#!/usr/bin/env php
<?php

class Antonella
{
    public $dir = __DIR__;

    // Unified exclusion arrays - optimized and deduplicated
    protected $files_to_exclude = [
        '.gitignore',
        '.gitmodules',
        '.gitattributes',
        '.travis.yml',
        'composer.json',
        'composer.lock',
        'package-lock.json',
        'antonella',
        'SECURITY.md',
        'antonella2',
        'antonella.backup',
        'readme.md',
        'README.md',
        'readme.txt',
        'bitbucket-pipelines.yml',
        'CHANGELOG.md',
        'CONTRIBUTING.md',
        'Gruntfile.js',
        'LICENSE',
        'wp-cli.phar',
        '.env',
        '.env-example',
        '.phpcs.xml',
        'docker-compose.yaml',
        'docker'
    ];

    protected $base_dirs_to_exclude = [
        '.git',
        '.github',
        '.claude',
        '.vscode',
        'wp-test',
        'docker',
        'node_modules',
        'wordpress',
        'docs',
        'test'
    ];

    protected $vendor_dirs_to_exclude = [
        'vlucas',
        'squizlabs',
        'phpunit',
        'theseer',
        'nikic',
        'phar-io',
        'myclabs',
        'symfony/console',
        'antonella-framework'
    ];

    protected $testdir = 'wp-test';
    protected $error_message = "Antonella doesn't understand you. Please read the manual at https://antonellaframework.com";

    /**
     * Main command processor with improved routing
     */
    public function process($data)
    {
        $command = $data[1] ?? 'help';

        $commands = [
            'makeup' => 'createZip',
            'namespace' => 'changeNamespace',
            'make' => 'makeController',
            'helper' => 'makeHelper',
            'widget' => 'makeWidget',
            'remove' => 'removeModule',
            'add' => 'addModule',
            'help' => 'showHelp',
            'serve' => 'serveDevelopment',
            'test' => 'runTest',
            'cpt' => 'makeCustomPostType',
            'block' => 'makeGutenbergBlock',
            'docker' => 'runDocker',
            'updateproject' => 'updateProjectFiles'
        ];

        if (isset($commands[$command]) && method_exists($this, $commands[$command])) {
            return $this->{$commands[$command]}($data);
        }

        $this->showError($this->error_message);
    }

    /**
     * Utility methods for better UX
     */
    private function showError($message)
    {
        echo "\033[31m$message\033[0m\n";
        exit(1);
    }

    private function showSuccess($message)
    {
        echo "\033[32m$message\033[0m\n";
    }

    private function showInfo($message)
    {
        echo "\033[33m$message\033[0m\n";
    }

    private function validateInput($data, $index, $errorMsg)
    {
        if (!isset($data[$index]) || trim($data[$index]) === '') {
            $this->showError($errorMsg);
        }
        return trim($data[$index]);
    }

    private function createDirectoryIfNotExists($path)
    {
        if (!is_dir($path)) {
            if (!mkdir($path, 0755, true)) {
                $this->showError("Could not create directory: $path");
            }
        }
    }

    /**
     * Get unified exclusion directories for current OS
     */
    private function getExcludedDirectories()
    {
        $excluded = $this->base_dirs_to_exclude;

        // Add OS-specific directories
        if (PHP_OS_FAMILY === 'Windows') {
            $excluded = array_merge($excluded, ['.', '..']);
        }

        // Add vendor directories with proper separator
        foreach ($this->vendor_dirs_to_exclude as $vendor) {
            // Replace forward slashes with OS-specific directory separator
            $vendor = str_replace('/', DIRECTORY_SEPARATOR, $vendor);
            $excluded[] = 'vendor' . DIRECTORY_SEPARATOR . $vendor;
        }

        return $excluded;
    }

    /**
     * Read current namespace from composer.json
     */
    public function readNamespace()
    {
        $composerPath = $this->dir . "/composer.json";

        if (!file_exists($composerPath)) {
            $this->showError("composer.json not found");
        }

        $composer = json_decode(file_get_contents($composerPath), true);

        if (!isset($composer['autoload']['psr-4'])) {
            $this->showError("PSR-4 autoload not found in composer.json");
        }

        $psr4 = $composer['autoload']['psr-4'];
        $namespace = rtrim(key($psr4), '\\');

        return $namespace;
    }

    /**
     * Update project files after installation
     */
    public function updateProjectFiles()
    {
        $oldFile = "antonella-framework.php";
        $newFile = basename($this->dir) . '.php';

        if (file_exists($oldFile)) {
            if (rename($oldFile, $newFile)) {
                $this->showSuccess("Renamed $oldFile to $newFile");
            } else {
                $this->showError("Failed to rename $oldFile");
            }
        }
    }

    /**
     * Optimized ZIP creation - unified method
     */
    public function createZip()
    {
        $this->showInfo("Antonella is packing the plugin...");

        $zipName = basename($this->dir) . '.zip';
        $zipPath = $this->dir . DIRECTORY_SEPARATOR . $zipName;

        // Remove existing zip
        if (file_exists($zipPath)) {
            unlink($zipPath);
        }

        $zip = new ZipArchive();
        if ($zip->open($zipName, ZipArchive::CREATE) !== TRUE) {
            $this->showError("Cannot create zip file: $zipName");
        }

        // Use appropriate method based on OS
        if (PHP_OS_FAMILY === 'Windows') {
            $this->addFilesRecursive($zip);
        } else {
            $this->addFilesWithIterator($zip);
        }

        $zip->close();
        $this->showSuccess("Plugin packed successfully: $zipName");
    }

    /**
     * Add files recursively (Windows method)
     */
    private function addFilesRecursive($zip)
    {
        $dirName = realpath($this->dir);
        $excludedDirs = $this->getExcludedDirectories();

        if (!is_dir($dirName)) {
            $this->showError("Directory $dirName does not exist");
        }

        $dirName = rtrim($dirName, DIRECTORY_SEPARATOR) . DIRECTORY_SEPARATOR;
        $dirStack = [$dirName];
        $cutFrom = strlen($dirName);

        while (!empty($dirStack)) {
            $currentDir = array_pop($dirStack);
            $filesToAdd = [];

            $dir = dir($currentDir);
            while (false !== ($node = $dir->read())) {
                if ($node === '.' || $node === '..' || in_array($node, $this->files_to_exclude)) {
                    continue;
                }

                $fullPath = $currentDir . $node;
                $relativePath = substr($fullPath, $cutFrom);
                
                // Normalize path separators for comparison
                $relativePath = str_replace(DIRECTORY_SEPARATOR, '/', $relativePath);
                
                // Check if this path should be excluded based on relative path
                $shouldExclude = false;
                foreach ($excludedDirs as $excludeDir) {
                    // Normalize exclude dir separators too
                    $normalizedExcludeDir = str_replace(DIRECTORY_SEPARATOR, '/', $excludeDir);
                    if (strpos($relativePath, $normalizedExcludeDir) === 0) {
                        $shouldExclude = true;
                        break;
                    }
                }
                
                if ($shouldExclude) {
                    continue;
                }

                if (is_dir($fullPath)) {
                    array_push($dirStack, $fullPath . DIRECTORY_SEPARATOR);
                } elseif (is_file($fullPath)) {
                    $filesToAdd[] = $node;
                }
            }
            $dir->close();

            $localDir = substr($currentDir, $cutFrom);
            // Normalize directory separators for ZIP format (always use forward slashes)
            $localDir = str_replace(DIRECTORY_SEPARATOR, '/', $localDir);

            if (!empty($localDir) && $localDir !== '/') {
                $zip->addEmptyDir($localDir);
            }

            foreach ($filesToAdd as $file) {
                $localFile = $localDir . $file;
                // Ensure consistent path separators in ZIP
                $localFile = str_replace(DIRECTORY_SEPARATOR, '/', $localFile);
                $zip->addFile($currentDir . $file, $localFile);
            }
        }
    }

    /**
     * Add files with iterator (Linux method)
     */
    private function addFilesWithIterator($zip)
    {
        $dirName = realpath($this->dir);
        $excludedDirs = $this->getExcludedDirectories();

        $files = new RecursiveIteratorIterator(
            new RecursiveDirectoryIterator($dirName),
            RecursiveIteratorIterator::LEAVES_ONLY
        );

        foreach ($files as $name => $file) {
            if (!$file->isDir() && !in_array($file->getFilename(), $this->files_to_exclude)) {
                $filePath = $file->getRealPath();
                $relativePath = substr($filePath, strlen($dirName) + 1);
                $zip->addFile($filePath, $relativePath);
            }
        }

        // Remove excluded directories
        for ($i = 0; $i < $zip->numFiles; $i++) {
            $entry = $zip->statIndex($i);
            foreach ($excludedDirs as $excludeDir) {
                if (strpos($entry['name'], $excludeDir) === 0) {
                    $zip->deleteIndex($i);
                    break;
                }
            }
        }
    }

    /**
     * Change namespace across all project files
     */
    public function changeNamespace($data)
    {
        $this->showInfo("Renaming the namespace...");

        $newNamespace = isset($data[2]) && trim($data[2]) !== ''
            ? strtoupper(trim($data[2]))
            : $this->generateRandomString(6);

        $currentNamespace = $this->readNamespace();

        // Update composer.json
        $this->updateFileContent(
            $this->dir . DIRECTORY_SEPARATOR . "composer.json",
            $currentNamespace,
            $newNamespace
        );

        // Update main plugin file
        $this->updateFileContent(
            $this->dir . DIRECTORY_SEPARATOR . "antonella-framework.php",
            $currentNamespace,
            $newNamespace
        );

        // Update all PHP files in src directory
        $this->updateDirectoryFiles(
            $this->dir . DIRECTORY_SEPARATOR . "src",
            $currentNamespace,
            $newNamespace
        );

        // Regenerate autoload
        exec("composer dump-autoload");

        $this->showSuccess("Namespace changed to: $newNamespace");
        exit(0);
    }

    /**
     * Update file content with namespace replacement
     */
    private function updateFileContent($filePath, $oldNamespace, $newNamespace)
    {
        if (!file_exists($filePath)) {
            return;
        }

        $content = file_get_contents($filePath);
        $content = str_replace($oldNamespace, $newNamespace, $content);
        file_put_contents($filePath, $content);
    }

    /**
     * Update all PHP files in directory recursively
     */
    private function updateDirectoryFiles($dirPath, $oldNamespace, $newNamespace)
    {
        if (!is_dir($dirPath)) {
            return;
        }

        $iterator = new RecursiveIteratorIterator(
            new RecursiveDirectoryIterator($dirPath)
        );

        foreach ($iterator as $file) {
            if ($file->isFile() && $file->getExtension() === 'php') {
                $this->updateFileContent($file->getPathname(), $oldNamespace, $newNamespace);
            }
        }
    }

    /**
     * Template generation system
     */
    private function getTemplate($type, $className, $namespace)
    {
        $templates = [
            'controller' => $this->getControllerTemplate($className, $namespace),
            'helper' => $this->getHelperTemplate($className),
            'widget' => $this->getWidgetTemplate($className, $namespace)
        ];

        return $templates[$type] ?? '';
    }

    private function getControllerTemplate($className, $namespace)
    {
        return "<?php
namespace $namespace;

class $className
{
    public function __construct()
    {
        // Constructor logic here
    }
}
// Made with Antonella Framework";
    }

    private function getHelperTemplate($functionName)
    {
        return "<?php
if (!function_exists('$functionName')) {
    /**
     * $functionName Helper Function
     * 
     * @return mixed
     */
    function $functionName()
    {
        // Helper logic here
    }
}
// Made with Antonella Framework";
    }

    private function getWidgetTemplate($className, $namespace)
    {
        return "<?php
namespace $namespace;

class $className extends \\WP_Widget
{
    /**
     * Widget configuration
     */
    public \$name_widget = '$className Widget';
    
    public \$options = [
        'classname' => strtolower('$className'),
        'description' => '$className widget description'
    ];
    
    public \$form_values = [
        'title' => 'Widget Title',
        // Add more default values as needed
    ];
    
    public function __construct()
    {
        parent::__construct('$className', \$this->name_widget, \$this->options);
    }
    
    public function form(\$instance)
    {
        \$instance = wp_parse_args((array) \$instance, \$this->form_values);
        \$html = '';
        
        foreach (\$instance as \$key => \$value) {
            \$field_id = \$this->get_field_id(\$key);
            \$field_name = \$this->get_field_name(\$key);
            \$html .= \"<p><label for='{\$field_id}'>\$key:</label>\";
            \$html .= \"<input class='widefat' id='{\$field_id}' name='{\$field_name}' type='text' value='\" . esc_attr(\$value) . \"' /></p>\";
        }
        
        echo \$html;
    }
    
    public function update(\$new_instance, \$old_instance)
    {
        \$instance = \$old_instance;
        foreach (\$new_instance as \$key => \$value) {
            \$instance[\$key] = sanitize_text_field(\$value);
        }
        return \$instance;
    }
    
    public function widget(\$args, \$instance)
    {
        extract(\$args);
        
        echo \$before_widget;
        
        if (!empty(\$instance['title'])) {
            echo \$before_title . apply_filters('widget_title', \$instance['title']) . \$after_title;
        }
        
        // Widget output logic here
        
        echo \$after_widget;
    }
}";
    }

    /**
     * Generate controller file
     */
    public function makeController($data)
    {
        $className = $this->validateInput($data, 2, "Controller name is required");
        $namespace = $this->readNamespace();

        $controllerDir = $this->dir . DIRECTORY_SEPARATOR . "src" . DIRECTORY_SEPARATOR . "Controllers";
        $this->createDirectoryIfNotExists($controllerDir);

        $filePath = $controllerDir . DIRECTORY_SEPARATOR . "$className.php";
        $template = $this->getTemplate('controller', $className, $namespace);

        if (file_put_contents($filePath, $template)) {
            $this->showSuccess("Controller $className.php created in src/Controllers/");
        } else {
            $this->showError("Failed to create controller file");
        }

        exit(0);
    }

    /**
     * Generate widget file
     */
    public function makeWidget($data)
    {
        $className = $this->validateInput($data, 2, "Widget name is required");
        $namespace = $this->readNamespace();

        $filePath = $this->dir . DIRECTORY_SEPARATOR . "src" . DIRECTORY_SEPARATOR . "$className.php";
        $template = $this->getTemplate('widget', $className, $namespace);

        if (file_put_contents($filePath, $template)) {
            $this->showSuccess("Widget $className.php created in src/");
        } else {
            $this->showError("Failed to create widget file");
        }

        exit(0);
    }

    /**
     * Generate helper file
     */
    public function makeHelper($data)
    {
        $functionName = $this->validateInput($data, 2, "Helper function name is required");

        $helperDir = $this->dir . DIRECTORY_SEPARATOR . "src" . DIRECTORY_SEPARATOR . "Helpers";
        $this->createDirectoryIfNotExists($helperDir);

        $filePath = $helperDir . DIRECTORY_SEPARATOR . "$functionName.php";
        $template = $this->getTemplate('helper', $functionName, '');

        if (file_put_contents($filePath, $template)) {
            $this->showSuccess("Helper $functionName.php created in src/Helpers/");
        } else {
            $this->showError("Failed to create helper file");
        }

        exit(0);
    }

    /**
     * Docker environment management
     */
    public function runDocker($data)
    {
        $this->showInfo("Starting Docker environment...");
        $command = 'docker-compose up' . (isset($data[2]) && $data[2] === '-d' ? ' -d' : '');
        exec($command);
        $this->showSuccess("Docker environment started!");
    }

    /**
     * Module management
     */
    public function removeModule($data)
    {
        $module = $data[2] ?? '';

        switch ($module) {
            case 'blade':
                return $this->removeBlade();
            case 'dd':
                return $this->removeDD();
            case 'model':
                return $this->removeModel();
            default:
                $this->showError("Module '$module' not supported for removal. Available: blade, dd, model");
        }
    }

    public function addModule($data)
    {
        $module = $data[2] ?? '';

        switch ($module) {
            case 'blade':
                return $this->addBlade();
            case 'dd':
                return $this->addDD();
            case 'model':
                return $this->addModel();
            case 'action':
                return $this->showActions($data);
            default:
                $this->showError("Module '$module' not supported. Available: blade, dd, model, action");
        }
    }

    private function removeBlade()
    {
        $this->showInfo("Removing Blade template engine...");
        exec('composer remove jenssegers/blade');
        $this->showSuccess("Blade removed successfully!");
    }

    private function addBlade()
    {
        echo "Add Blade template engine? Type 'yes' or 'y' to continue: ";
        $handle = fopen("php://stdin", "r");
        $response = trim(fgets($handle));
        fclose($handle);

        if (in_array(strtolower($response), ['yes', 'y'])) {
            $this->showInfo("Adding Blade template engine...");
            exec('composer require jenssegers/blade');
            $this->showSuccess("Blade added successfully!");
        } else {
            $this->showInfo("Operation cancelled");
        }
    }

    /**
     * Add Symfony Var-Dumper (dd function) for debugging
     */
    private function addDD()
    {
        $this->showInfo("🐛 Symfony Var-Dumper Installation");
        $this->showInfo("Adding powerful debugging tools (dd() function)...");
        echo "\n";

        $this->showInfo("📦 Installing symfony/var-dumper as dev dependency...");

        // Simple progress indicator
        echo "Installing";
        for ($i = 0; $i < 3; $i++) {
            sleep(1);
            echo ".";
        }
        echo "\n";

        exec('composer require symfony/var-dumper --dev 2>&1', $composerOutput, $returnCode);

        if ($returnCode === 0) {
            $this->showSuccess("✅ Symfony Var-Dumper successfully installed!");
            $this->showInfo("🎯 You can now use dd() and dump() functions for debugging");
            $this->showInfo("💡 Example: dd(\$variable); // Dies and dumps the variable");
        } else {
            $this->showError("❌ Installation failed. Please check your composer configuration.");
            $this->showInfo("Composer output:");
            foreach ($composerOutput as $line) {
                echo "  $line\n";
            }
        }
    }

    /**
     * Add WordPress Eloquent Models
     */
    private function addModel()
    {
        $this->showInfo("🗃️ WordPress Eloquent Models Installation");
        $this->showInfo("Adding powerful Eloquent ORM models for WordPress...");
        echo "\n";

        echo "Add WordPress Eloquent Models? Type 'yes' or 'y' to continue: ";
        $handle = fopen("php://stdin", "r");
        $response = trim(fgets($handle));
        fclose($handle);

        if (!in_array(strtolower($response), ['yes', 'y'])) {
            $this->showInfo("⚠️  Installation cancelled by user");
            $this->showInfo("💡 Tip: Run 'php antonella add model' anytime to install WordPress Eloquent Models");
            return;
        }

        echo "\n";
        $this->showInfo("📦 Installing antonella-framework/wordpress-eloquent-models via Composer...");

        // Simple progress indicator
        echo "Installing";
        for ($i = 0; $i < 3; $i++) {
            sleep(1);
            echo ".";
        }
        echo "\n";

        exec('composer require antonella-framework/wordpress-eloquent-models 2>&1', $composerOutput, $returnCode);

        if ($returnCode === 0) {
            $this->showSuccess("✅ WordPress Eloquent Models successfully installed!");
            $this->showInfo("📚 You can now use Eloquent ORM models for WordPress data");
            $this->showInfo("💡 Tip: Use models like User, Post, Comment, etc. with Eloquent syntax");
        } else {
            $this->showError("❌ Installation failed. Please check your composer configuration.");
            $this->showInfo("💡 Make sure the package antonella-framework/wordpress-eloquent-models exists");
            $this->showInfo("Composer output:");
            foreach ($composerOutput as $line) {
                echo "  $line\n";
            }
        }
    }

    private function showActions($data)
    {
        if (!isset($data[3])) {
            $this->showError("Additional parameter required");
        }

        $configPath = $this->dir . DIRECTORY_SEPARATOR . "src" . DIRECTORY_SEPARATOR . "Config.php";
        if (!file_exists($configPath)) {
            $this->showError("Config.php not found");
        }

        include($configPath);
        $namespace = $this->readNamespace();
        $configClass = $namespace . "\\Config";

        if (class_exists($configClass)) {
            $config = new $configClass;
            print_r($config->add_action);
        }
    }

    /**
     * Checks if a TCP port is in use on the host.
     * @param int $port The port to check.
     * @return bool True if in use, False if free.
     */
    private function isPortInUse(int $port): bool
    {
        // Try to open a connection to the port. If it fails, it's free.
        $connection = @fsockopen('127.0.0.1', $port, $errno, $errstr, 0.1);
        if (is_resource($connection)) {
            fclose($connection);
            return true; // The port is in use
        }
        return false; // The port is free
    }

    /**
     * Development server
     */
    public function serveDevelopment($data)
    {
        $this->showInfo("Starting Antonella development environment...");

        // Docker checks from original method
        $this->showInfo("Checking Docker installation...");
        $dockerCheck = shell_exec('docker --version 2>&1');
        if (empty($dockerCheck) || strpos($dockerCheck, 'not recognized') !== false) {
            $this->showError("Docker is not installed. Please install from https://www.docker.com/products/docker-desktop");
        }
        $dockerPs = shell_exec('docker ps 2>&1');
        if (strpos($dockerPs, 'error during connect') !== false || strpos($dockerPs, 'Cannot connect to the Docker daemon') !== false) {
            $this->showError("Docker is not running. Please start Docker Desktop and try again.");
        }
        $this->showSuccess("Docker is ready!");

        $base_wordpress_port = 8080;
        $base_mysql_port = 3306;
        $base_phpmyadmin_port = 9002;
        $max_attempts = 20;

        $wpPort = $base_wordpress_port;
        $mysqlPort = $base_mysql_port;
        $pmaPort = $base_phpmyadmin_port;
        $foundFreePortSet = false;

        for ($i = 0; $i < $max_attempts; $i++) {
            $wpPort = $base_wordpress_port + $i;
            $mysqlPort = $base_mysql_port + $i;
            $pmaPort = $base_phpmyadmin_port + $i;

            $this->showInfo("---");
            $this->showInfo("Attempt " . ($i + 1) . ": Checking ports... (WP: $wpPort, MySQL: $mysqlPort, PMA: $pmaPort)");

            $wpBusy = $this->isPortInUse($wpPort);
            $mysqlBusy = $this->isPortInUse($mysqlPort);
            $pmaBusy = $this->isPortInUse($pmaPort);

            if (!$wpBusy && !$mysqlBusy && !$pmaBusy) {
                $foundFreePortSet = true;
                break;
            }

            if ($wpBusy) $this->showInfo("  -> Port $wpPort (WordPress) is in use.");
            if ($mysqlBusy) $this->showInfo("  -> Port $mysqlPort (MySQL) is in use.");
            if ($pmaBusy) $this->showInfo("  -> Port $pmaPort (phpMyAdmin) is in use.");
        }

        if (!$foundFreePortSet) {
            $this->showError("Could not find a free set of ports after " . $max_attempts . " attempts.");
            $this->showError("Please free up the ports or check your configuration.");
            return;
        }

        $this->showInfo("---");
        $this->showSuccess("Free ports found! Starting Docker with the following configuration:");
        $this->showInfo("  - WordPress: http://localhost:$wpPort");
        $this->showInfo("  - MySQL (Host): $mysqlPort");
        $this->showInfo("  - phpMyAdmin: http://localhost:$pmaPort");
        
        $this->showInfo("Starting development environment...");

        $envVars = "WORDPRESS_PORT=$wpPort MYSQL_PORT=$mysqlPort PHPMYADMIN_PORT=$pmaPort";
        $dockerCommand = 'docker-compose up' . (isset($data[2]) && $data[2] === '-d' ? ' -d' : '');
        
        $command = "$envVars $dockerCommand";
        
        system($command);

        $this->showSuccess("Development environment is ready!");
    }

    /**
     * Test management
     */
    public function runTest($data)
    {
        $subCommand = $data[2] ?? '';

        switch ($subCommand) {
            case 'refresh':
                return $this->refreshTestEnvironment($data);
            default:
                $this->showError("Test subcommand '$subCommand' not recognized");
        }
    }

    private function refreshTestEnvironment($data)
    {
        // Test environment refresh logic would go here
        // This is a complex method that would need the original implementation
        $this->showInfo("Test environment refresh functionality needs implementation");
    }

    /**
     * Custom Post Type creation
     */
    public function makeCustomPostType($data)
    {
        $postTypeName = $this->validateInput($data, 2, "Custom Post Type name is required");

        $configPath = $this->dir . DIRECTORY_SEPARATOR . 'src' . DIRECTORY_SEPARATOR . 'Config.php';

        if (!file_exists($configPath)) {
            $this->showError("Config.php not found");
        }

        $content = file_get_contents($configPath);
        $lines = explode("\n", $content);

        foreach ($lines as $i => $line) {
            if (strpos($line, 'public $post_types = [') !== false) {
                $lines[$i] = '    public $post_types = [
        [
            "singular"   => "' . $postTypeName . '",
            "plural"     => "' . $postTypeName . 's",
            "slug"       => "' . strtolower($postTypeName) . '",
            "position"   => 99,
            "taxonomy"   => [],
            "image"      => "antonella-icon.png",
            "gutenberg"  => true
        ],';
                break;
            }
        }

        file_put_contents($configPath, implode("\n", $lines));
        $this->showSuccess("Custom Post Type '$postTypeName' added to Config.php");
    }

    /**
     * Gutenberg block creation
     */
    public function makeGutenbergBlock($data)
    {
        $blockName = $this->validateInput($data, 2, "Gutenberg block name is required");

        $jsContent = $this->getGutenbergBlockJS($blockName);
        $cssContent = $this->getGutenbergBlockCSS($blockName);

        $jsPath = $this->dir . DIRECTORY_SEPARATOR . "assets" . DIRECTORY_SEPARATOR . "js" . DIRECTORY_SEPARATOR . "$blockName.js";
        $cssPath = $this->dir . DIRECTORY_SEPARATOR . "assets" . DIRECTORY_SEPARATOR . "css" . DIRECTORY_SEPARATOR . "$blockName.css";

        file_put_contents($jsPath, $jsContent);
        file_put_contents($cssPath, $cssContent);

        $this->addBlockToConfig($blockName);

        $this->showSuccess("Gutenberg block '$blockName' created successfully");
    }

    private function getGutenbergBlockJS($blockName)
    {
        return "/* Gutenberg Block: $blockName */
wp.blocks.registerBlockType('antonella/$blockName', {
    title: '$blockName',
    icon: 'smiley',
    category: 'common',
    attributes: {
        content: {type: 'string'},
        color: {type: 'string'}
    },
    
    edit: function(props) {
        function updateContent(event) {
            props.setAttributes({content: event.target.value});
        }
        
        function updateColor(value) {
            props.setAttributes({color: value.hex});
        }
        
        return React.createElement(
            'div',
            null,
            React.createElement('h3', null, '$blockName Block'),
            React.createElement('input', {
                type: 'text',
                value: props.attributes.content,
                onChange: updateContent
            }),
            React.createElement(wp.components.ColorPicker, {
                color: props.attributes.color,
                onChangeComplete: updateColor
            })
        );
    },
    
    save: function(props) {
        return wp.element.createElement(
            'h3',
            {style: {border: '3px solid ' + props.attributes.color}},
            props.attributes.content
        );
    }
});";
    }

    private function getGutenbergBlockCSS($blockName)
    {
        return "/* CSS for $blockName Gutenberg Block */
.wp-block-antonella-" . strtolower($blockName) . " {
    /* Add your custom styles here */
}";
    }

    private function addBlockToConfig($blockName)
    {
        $configPath = $this->dir . DIRECTORY_SEPARATOR . 'src' . DIRECTORY_SEPARATOR . 'Config.php';

        if (!file_exists($configPath)) {
            return;
        }

        $content = file_get_contents($configPath);
        $lines = explode("\n", $content);

        foreach ($lines as $i => $line) {
            if (strpos($line, 'public $gutenberg_blocks = [') !== false) {
                $lines[$i] = '    public $gutenberg_blocks = [
        "' . $blockName . '",';
                break;
            }
        }

        file_put_contents($configPath, implode("\n", $lines));
    }

    /**
     * Generate random string for namespace
     */
    private function generateRandomString($length)
    {
        $characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
        $result = '';

        for ($i = 0; $i < $length; $i++) {
            $result .= $characters[mt_rand(0, strlen($characters) - 1)];
        }

        return $result;
    }

    /**
     * Display help information
     */
    public function showHelp()
    {
        $this->displayLogo();
        echo "\n";
        $this->showInfo("Usage:");
        echo "\033[37m php antonella [option] [name or value]\033[0m\n\n";

        echo "\033[33mAvailable Commands:\033[0m\n";
        echo "\033[32m  namespace [name]\033[0m      Generate or regenerate namespace\n";
        echo "\033[32m  makeup\033[0m                Create plugin ZIP file\n";
        echo "\033[32m  make [name]\033[0m           Generate controller class\n";
        echo "\033[32m  helper [name]\033[0m         Generate helper function\n";
        echo "\033[32m  widget [name]\033[0m         Generate widget class\n";
        echo "\033[32m  cpt [name]\033[0m            Generate custom post type\n";
        echo "\033[32m  block [name]\033[0m          Generate Gutenberg block\n";
        echo "\033[32m  serve [-d]\033[0m            Start development server\n";
        echo "\033[32m  add [module]\033[0m          Add framework modules (blade, dd, model)\n";
        echo "\033[32m  remove [module]\033[0m       Remove framework modules\n";
        echo "\033[32m  help\033[0m                  Show this help message\n\n";

        echo "\033[37mDocumentation: \033[33mhttps://antonellaframework.com\033[0m\n";
        echo "\033[37mVideo Tutorial: \033[33mhttps://tipeos.com/anto\033[0m\n";
    }

    private function displayLogo()
    {
        echo "\033[33m*******************************************************************\033[0m\n";
        echo "\033[33m*******************************************************************\033[0m\n";
        echo "\033[33m***                    _                   _ _                  ***\033[0m\n";
        echo "\033[33m***       /\\         | |                 | | |                  ***\033[0m\n";
        echo "\033[33m***      /  \\   _ __ | |_ ___  _ __   ___| | | __ _             ***\033[0m\n";
        echo "\033[33m***     / /\\ \\ | '_ \\| __/ _ \\| '_ \\ / _ \\ | |/ _` |            ***\033[0m\n";
        echo "\033[33m***    / ____ \\| | | | || (_) | | | |  __/ | | (_| |            ***\033[0m\n";
        echo "\033[33m***   /_/____\\_\\_| |_|\\__\\___/|_| |_|\\___|_|_|\\__,_|    _       ***\033[0m\n";
        echo "\033[33m***   |  ____|                                         | |      ***\033[0m\n";
        echo "\033[33m***   | |__ _ __ __ _ _ __ ___   _____      _____  _ __| | __   ***\033[0m\n";
        echo "\033[33m***   |  __| '__/ _` | '_ ` _ \\ / _ \\ \\ /\\ / / _ \\| '__| |/ /   ***\033[0m\n";
        echo "\033[33m***   | |  | | | (_| | | | | | |  __/\\ V  V / (_) | |  |   <    ***\033[0m\n";
        echo "\033[33m***   |_|  |_|  \\__,_|_| |_| |_|\\___| \\_/\\_/ \\___/|_|  |_|\\_\\   ***\033[0m\n";
        echo "\033[33m***                                                             ***\033[0m\n";
        echo "\033[33m*******************************************************************\033[0m\n";
        echo "\033[33m*******************************************************************\033[0m\n";
    }
}

// Execute Antonella CLI
$antonella = new Antonella();
exit($antonella->process($argv));